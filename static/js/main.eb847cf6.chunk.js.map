{"version":3,"sources":["Component/ContactForm/ContactForm.module.scss","Component/ContactListItem/ContactListItem.module.scss","Component/Filter/Filter.module.scss","Component/Title/trans.module.css","Component/Title/Phonebook.module.scss","Component/ContactList/ContactList.module.scss","Component/Title/Phonebook.js","redux/contacts/contactsActions.js","redux/contacts/contactsOperations.js","Component/ContactForm/ContactForm.js","Component/ContactListItem/ContactListItem.js","redux/contacts/contactsSelectors.js","Component/ContactList/ContactList.js","Component/Filter/Filter.js","App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["module","exports","Title","CSSTransition","in","appear","classNames","trans","timeout","className","styles","title","addContactRequest","createAction","addContactSuccess","addContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","removeContactRequest","removeContactSuccess","removeContactError","changeFilter","axios","defaults","baseURL","addContact","name","number","dispatch","contactsActions","post","then","data","catch","error","fetchContacts","get","removeContact","id","delete","ContactForm","state","handleChange","e","target","value","setState","handleSubmit","preventDefault","Number","alert","props","onAddContact","this","contactForm","onSubmit","input","type","onChange","required","addBtn","Component","mapDispatchToProps","contactsOperation","connect","ownProps","item","contacts","items","find","delCont","listItem","listItemInfo","btn","onClick","getContacts","getFilter","filter","getLoading","loading","getVisibleContacts","createSelector","contact","toLowerCase","includes","getContactById","contactId","contactsSelectors","map","list","onChangeFilter","section","label","App","onFetchContacts","isLoadingContacts","length","React","contactsOperations","createReducer","action","payload","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb847cf6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__Qqf9C\",\"contactFormItem\":\"ContactForm_contactFormItem__32QT_\",\"input\":\"ContactForm_input__2pMlB\",\"addBtn\":\"ContactForm_addBtn__1sU0i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactListItem_listItem__2cvZf\",\"btn\":\"ContactListItem_btn__vqt6A\",\"margin\":\"ContactListItem_margin__g8Wem\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Filter_section__1DlCT\",\"label\":\"Filter_label__2E_re\",\"input\":\"Filter_input__JPXH9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"trans_appear__26LEj\",\"appearActive\":\"trans_appearActive__3cJdv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Phonebook_title__19nmk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1FwP0\"};","import React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport trans from \"./trans.module.css\";\r\nimport styles from \"./Phonebook.module.scss\";\r\n\r\nconst Title = () => (\r\n  <CSSTransition in={true} appear classNames={trans} timeout={500}>\r\n    <h1 className={styles.title}>Phonebook</h1>\r\n  </CSSTransition>\r\n);\r\n\r\nexport default Title;\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContactRequest = createAction(\"contacts/addRequest\");\r\nconst addContactSuccess = createAction(\"contacts/addSuccess\");\r\nconst addContactError = createAction(\"contacts/addError\");\r\n\r\nconst fetchContactsRequest = createAction(\"contacts/fetchRequest\");\r\nconst fetchContactsSuccess = createAction(\"contacts/fetchSuccess\");\r\nconst fetchContactsError = createAction(\"contacts/fetchError\");\r\n\r\nconst removeContactRequest = createAction(\"contacts/removeRequest\");\r\nconst removeContactSuccess = createAction(\"contacts/removeSuccess\");\r\nconst removeContactError = createAction(\"contacts/removeError\");\r\n\r\nconst changeFilter = createAction(\"contacts/filter\");\r\n\r\nexport default {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n  changeFilter,\r\n};\r\n","import axios from \"axios\";\r\nimport contactsActions from \"./contactsActions\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:2000\";\r\n\r\nconst addContact = (name, number) => (dispatch) => {\r\n  dispatch(contactsActions.addContactRequest());\r\n\r\n  axios\r\n    .post(\"/contacts\", { name, number })\r\n    .then(({ data }) => dispatch(contactsActions.addContactSuccess(data)))\r\n    .catch((error) => dispatch(contactsActions.addContactError(error)));\r\n};\r\n\r\nconst fetchContacts = () => (dispatch) => {\r\n  dispatch(contactsActions.fetchContactsRequest());\r\n\r\n  axios\r\n    .get(\"/contacts\")\r\n    .then(({ data }) => dispatch(contactsActions.fetchContactsSuccess(data)))\r\n    .catch((error) => dispatch(contactsActions.fetchContactsError(error)));\r\n};\r\nconst removeContact = (id) => (dispatch) => {\r\n  dispatch(contactsActions.removeContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(contactsActions.removeContactSuccess(id)))\r\n    .catch((error) => dispatch(contactsActions.removeContactError(error)));\r\n};\r\n\r\nexport default { addContact, fetchContacts, removeContact };\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styles from \"./ContactForm.module.scss\";\r\nimport contactsOperation from \"../../redux/contacts/contactsOperations\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Перевірка на ввід числа\r\n    if (!Number(this.state.number)) {\r\n      alert(\"В полі Number було введено не число, повторіть спробу\");\r\n\r\n      this.setState({\r\n        number: \"\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.props.onAddContact(this.state.name, this.state.number);\r\n\r\n    this.setState({\r\n      name: \"\",\r\n      number: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className={styles.contactForm} onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name\r\n          <br />\r\n          <input\r\n            className={styles.input}\r\n            type=\"text\"\r\n            value={name}\r\n            name=\"name\"\r\n            onChange={this.handleChange}\r\n            required\r\n          />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Number\r\n          <br />\r\n          <input\r\n            className={styles.input}\r\n            type=\"tel\"\r\n            value={number}\r\n            name=\"number\"\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n        <button className={styles.addBtn} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onAddContact: contactsOperation.addContact,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport styles from \"./ContactListItem.module.scss\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport contactsOperation from \"../../redux/contacts/contactsOperations\";\r\n\r\nconst ContactListItem = ({ name, number, delCont }) => (\r\n  <li className={styles.listItem}>\r\n    <p className={styles.listItemInfo}>{name}:</p>\r\n    <p className={styles.listItemInfo}>{number}</p>\r\n    <button className={styles.btn} onClick={delCont}>\r\n      Delete\r\n    </button>\r\n  </li>\r\n);\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  delCont: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const item = state.contacts.items.find((item) => item.id === ownProps.id);\r\n\r\n  return { ...item };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  delCont: () => dispatch(contactsOperation.removeContact(ownProps.id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nconst getContacts = (state) => state.contacts.items;\r\n\r\nconst getFilter = (state) => state.contacts.filter;\r\n\r\nconst getLoading = (state) => state.contacts.loading;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filter)\r\n    );\r\n  }\r\n);\r\n\r\nconst getContactById = createSelector(\r\n  [(state, contactId) => contactId, getContacts],\r\n  (contactId, contacts) => contacts.find((item) => item.id === contactId)\r\n);\r\n\r\nexport default { getFilter, getLoading, getVisibleContacts, getContactById };\r\n","import React from \"react\";\r\nimport ContactListItem from \"../ContactListItem/ContactListItem\";\r\nimport PropTypes from \"prop-types\";\r\nimport contactsSelectors from \"../../redux/contacts/contactsSelectors\";\r\nimport styles from \"./ContactList.module.scss\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nconst ContactList = ({ contacts }) => (\r\n  <section>\r\n    {contacts.map((contact) => (\r\n      <ContactListItem\r\n        className={styles.list}\r\n        key={contact.id}\r\n        id={contact.id}\r\n      />\r\n    ))}\r\n  </section>\r\n);\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { contacts: contactsSelectors.getVisibleContacts(state) };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Filter.module.scss\";\r\nimport contactsSelectors from \"../../redux/contacts/contactsSelectors\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../../redux/contacts/contactsActions\";\r\n\r\nlet Filter = ({ filter, onChangeFilter }) => {\r\n  return (\r\n    <section className={styles.section}>\r\n      <label className={styles.label}>\r\n        Find contacts by name:\r\n        <br />\r\n        <input\r\n          onChange={(e) => onChangeFilter(e.target.value)}\r\n          value={filter}\r\n          name=\"filter\"\r\n          type=\"text\"\r\n          className={styles.input}\r\n        />\r\n      </label>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: contactsActions.changeFilter,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n  onChangeFilter: PropTypes.func,\r\n  filter: PropTypes.string,\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Title from \"./Component/Title/Phonebook\";\nimport ContactForm from \"./Component/ContactForm/ContactForm\";\nimport ContactList from \"./Component/ContactList/ContactList\";\nimport Filter from \"./Component/Filter/Filter\";\nimport { connect } from \"react-redux\";\nimport contactsOperations from \"./redux/contacts/contactsOperations\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.onFetchContacts();\n  }\n  render() {\n    return (\n      <div>\n        {this.props.isLoadingContacts && <h1> LOADING...</h1>}\n        <Title />\n        <ContactForm />\n        <ContactList />\n        {(this.props.value.length > 1 || this.props.filter) && <Filter />}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  value: state.contacts.items,\n  filter: state.contacts.filter,\n  isLoadingContacts: state.contacts.loading,\n});\nconst mapDispatchToProps = {\n  onFetchContacts: contactsOperations.fetchContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport contactsActions from \"./contactsActions\";\r\n\r\nconst addContact = (state, action) => {\r\n  return [...state, action.payload];\r\n};\r\nconst removeContact = (state, action) => {\r\n  return state.filter((contact) => contact.id !== action.payload);\r\n};\r\n\r\nconst items = createReducer([], {\r\n  [contactsActions.fetchContactsSuccess]: (state, action) => action.payload,\r\n  [contactsActions.addContactSuccess]: addContact,\r\n  [contactsActions.removeContactSuccess]: removeContact,\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [contactsActions.changeFilter]: (state, action) => action.payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [contactsActions.addContactRequest]: () => true,\r\n  [contactsActions.addContactSuccess]: () => false,\r\n  [contactsActions.addContactError]: () => false,\r\n  [contactsActions.fetchContactsRequest]: () => true,\r\n  [contactsActions.fetchContactsSuccess]: () => false,\r\n  [contactsActions.fetchContactsError]: () => false,\r\n  [contactsActions.removeContactRequest]: () => true,\r\n  [contactsActions.removeContactSuccess]: () => false,\r\n  [contactsActions.removeContactError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  loading,\r\n  filter,\r\n});\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport contactsReducer from \"./contacts/contactsReducer\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}